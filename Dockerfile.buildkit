# Dockerfile.buildkit - Self-contained Kimia with BuildKit
# Kimia launches its own rootlesskit + buildkitd

ARG VERSION="0.0.0-dev"
ARG BUILD_DATE="0"
ARG COMMIT="unknown"
ARG BRANCH="unknown"
ARG GOLANG_VERSION=1.25.3
ARG BUILDKIT_VERSION=v0.25.1
ARG ROOTLESSKIT_VERSION=v2.3.5
ARG COSIGN_VERSION=v3.0.2
ARG TARGETARCH

# Stage 1: Build kimia binary
FROM golang:${GOLANG_VERSION}-alpine AS kimia-builder
ARG VERSION
ARG BUILD_DATE
ARG COMMIT
ARG BRANCH

WORKDIR /app
COPY src/ .
RUN go mod tidy

RUN CGO_ENABLED=0 GOOS=linux go build \
    -trimpath \
    -ldflags="-s -w \
        -X main.Version=${VERSION} \
        -X main.BuildDate=${BUILD_DATE} \
        -X main.CommitSHA=${COMMIT} \
        -X main.Branch=${BRANCH}" \
    -o kimia ./cmd/kimia

# Stage 2: Download Buildkit + rootlesskit + cosign

FROM alpine:latest as kimia-deps

ARG TARGETARCH
ARG BUILDKIT_VERSION
ARG ROOTLESSKIT_VERSION
ARG COSIGN_VERSION

WORKDIR /deps

RUN apk update && apk add --no-cache \
    bash \
    curl \
    ca-certificates \
    jq

# Download and verify BuildKit
RUN ARCH=$(case ${TARGETARCH} in \
        "amd64") echo "amd64" ;; \
        "arm64") echo "arm64" ;; \
        *) echo "amd64" ;; \
    esac) && \
    curl -fsSL "https://github.com/moby/buildkit/releases/download/${BUILDKIT_VERSION}/buildkit-${BUILDKIT_VERSION}.linux-${ARCH}.tar.gz" -o buildkit.tar.gz && \
    curl -fsSL "https://github.com/moby/buildkit/releases/download/${BUILDKIT_VERSION}/buildkit-${BUILDKIT_VERSION}.linux-${ARCH}.provenance.json" -o provenance.json && \
    expected=$(jq -r '.subject[0].digest.sha256' provenance.json) && \
    actual=$(sha256sum buildkit.tar.gz | awk '{print $1}') && \
    if [ "$expected" = "$actual" ]; then \
        echo "BuildKit SHA256 OK: $actual"; \
    else \
        echo "BuildKit SHA256 FAIL!"; \
        echo "Expected: $expected"; \
        echo "Actual:   $actual"; \
        exit 1; \
    fi

RUN tar -xf buildkit.tar.gz

# Download and verify RootlessKit
RUN ARCH=$(case ${TARGETARCH} in \
        "amd64") echo "x86_64" ;; \
        "arm64") echo "aarch64" ;; \
        *) echo "x86_64" ;; \
    esac) && \
    curl -fsSL "https://github.com/rootless-containers/rootlesskit/releases/download/${ROOTLESSKIT_VERSION}/rootlesskit-${ARCH}.tar.gz" -o "rootlesskit-${ARCH}.tar.gz" && \
    curl -fsSL "https://github.com/rootless-containers/rootlesskit/releases/download/${ROOTLESSKIT_VERSION}/SHA256SUMS" -o SHA256SUMS && \
    grep "rootlesskit-${ARCH}.tar.gz" SHA256SUMS > SHA256SUMS.single && \
    sha256sum -c SHA256SUMS.single && \
    tar -xf "rootlesskit-${ARCH}.tar.gz" bin

# Download and install Cosign
RUN ARCH=$(case ${TARGETARCH} in \
        "amd64") echo "amd64" ;; \
        "arm64") echo "arm64" ;; \
        *) echo "amd64" ;; \
    esac) && \
    curl -fsSL "https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-${ARCH}" -o bin/cosign && \
    chmod +x bin/cosign && \
    curl -fsSL "https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/sigstore.json" -o sigstore.json && \
    expected=$(jq -r '.verificationMaterial.tlogEntries[0].canonicalizedBody' sigstore.json | base64 -d | jq -r '.spec.data.hash.value') && \
    actual=$(sha256sum bin/cosign | awk '{print $1}') && \
    if [ "$expected" = "$actual" ]; then \
        echo "cosign SHA256 OK: $actual"; \
    else \
        echo "cosign SHA256 FAIL!"; \
        echo "Expected: $expected"; \
        echo "Actual:   $actual"; \
        exit 1; \
    fi

# Stage 3: Runtime image with BuildKit + rootlesskit + crun
FROM alpine:latest


# Install minimal dependencies
RUN apk add --no-cache \
    bash \
    curl \
    ca-certificates \
    shadow \
    shadow-uidmap \
    crun \
    git

COPY --from=kimia-deps /deps/bin /usr/local/bin
# Verify installations
RUN buildkitd --version && \
    buildctl --version && \
    rootlesskit --version && \
    cosign version

# Copy kimia binary
COPY --from=kimia-builder /app/kimia /usr/local/bin/kimia
RUN chmod +x /usr/local/bin/kimia

# Install credential helpers
RUN ECR_VERSION=$(curl -sL https://api.github.com/repos/awslabs/amazon-ecr-credential-helper/releases/latest | grep '"tag_name"' | cut -d'"' -f4 | sed 's/^v//') && \
    ARCH=$(case ${TARGETARCH} in \
        "amd64") echo "amd64" ;; \
        "arm64") echo "arm64" ;; \
        *) echo "amd64" ;; \
    esac) && \
    curl -fsSL -o /usr/local/bin/docker-credential-ecr-login \
        "https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/${ECR_VERSION}/linux-${ARCH}/docker-credential-ecr-login" && \
    chmod +x /usr/local/bin/docker-credential-ecr-login

RUN GCR_VERSION=$(curl -sL https://api.github.com/repos/GoogleCloudPlatform/docker-credential-gcr/releases/latest | grep '"tag_name"' | cut -d'"' -f4 | sed 's/^v//') && \
    ARCH=$(case ${TARGETARCH} in \
        "amd64") echo "amd64" ;; \
        "arm64") echo "arm64" ;; \
        *) echo "amd64" ;; \
    esac) && \
    curl -fsSL "https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${GCR_VERSION}/docker-credential-gcr_linux_${ARCH}-${GCR_VERSION}.tar.gz" \
    | tar xz -C /usr/local/bin/ docker-credential-gcr && \
    chmod +x /usr/local/bin/docker-credential-gcr

# Setup SETUID binaries for user namespaces
RUN chmod u+s /usr/bin/newuidmap /usr/bin/newgidmap

# Create kimia user with proper subuid/subgid mappings
RUN adduser -D -u 1000 kimia && \
    echo "kimia:100000:65536" >> /etc/subuid && \
    echo "kimia:100000:65536" >> /etc/subgid

# Create directories with proper permissions
RUN mkdir -p /tmp/work /tmp/run && \
    mkdir -p /run/buildkit /var/lib/buildkit && \
    chmod 777 /run/buildkit /var/lib/buildkit && \
    chown -R kimia:kimia /tmp/work /tmp/run

# Configure buildkit to use crun in rootless mode
RUN mkdir -p /home/kimia/.config/buildkit && \
    cat > /home/kimia/.config/buildkit/buildkitd.toml <<'EOF'
[worker.oci]
  enabled = true
  rootless = true
  binary = "crun"
  noProcessSandbox = true
EOF

RUN chown -R kimia:kimia /home/kimia/.config

# Switch to non-root user
USER 1000
WORKDIR /tmp/work

# Set environment
ENV PATH=/usr/local/bin:$PATH
ENV XDG_RUNTIME_DIR=/tmp/run
ENV BUILDKIT_HOST=unix:///run/buildkit/buildkitd.sock
ENV HOME=/home/kimia
ENV DOCKER_CONFIG=/home/kimia/.docker

LABEL org.opencontainers.image.source="https://github.com/rapidfort/kimia"
LABEL org.opencontainers.image.description="Kimia - Kubernetes-Native OCI Image Builder (BuildKit)"
LABEL org.opencontainers.image.builder="buildkit"

ENTRYPOINT ["/usr/local/bin/kimia"]
CMD ["--help"]